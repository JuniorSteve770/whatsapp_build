{"version":3,"sources":["Components/01Connects/firebase.js","Components/03Subsidebar/SubsideBar.js","Components/01Connects/StateProvider.js","Components/02Sidebar/SideBar.js","Components/04Chat/Chat.js","Components/01Connects/reducer.js","Components/00Landing/Login.js","App.js","reportWebVitals.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SubsideBar","id","name","addNewchats","useState","seed","setSeed","messages","setMessage","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","SideBar","romChats","setRoms","user","unsubscribe","snapshort","photoURL","IconButton","placeholder","type","room","Chat","input","setInput","roomId","useParams","setroomName","setMessages","Date","length","timestamp","toDate","toUTCString","displayName","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6ee6e6b.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBK5WkC80DoNj5V-g9Fks8DOIbZxisTcNI\",\r\n    authDomain: \"whatsapp-clone-react-dcec4.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-react-dcec4.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-react-dcec4\",\r\n    storageBucket: \"whatsapp-clone-react-dcec4.appspot.com\",\r\n    messagingSenderId: \"537100702014\",\r\n    appId: \"1:537100702014:web:a8889c6dfcad64fa395c6f\",\r\n    measurementId: \"G-GRVNXFRPSV\"\r\n  };\r\n\r\n  // Here we initialize the firebaseConfig and store in the const FirebaseApp\r\n  // var app = firebase.initializeApp({ ... });\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  \r\n  // Here we create another const that will access the firestore instance of the firebase config\r\n  const db = firebaseApp.firestore();\r\n  \r\n  // Here is the Authentification Handler\r\n  const auth = firebase.auth();\r\n\r\n  // Here is the google Authentification process\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  // Here we Export the needed credentials\r\n  export { auth, provider };\r\n  export default db;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Avatar} from '@material-ui/core';\r\nimport db from \"../01Connects/firebase\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport './subsideBar.css'\r\n\r\nfunction SubsideBar({id, name, addNewchats}) {\r\n\r\n\r\n// the constabove generate random id that will display different imagesfrom the api and placed inside avatar src link\r\n// the src link is and api that insrt images inside the avatar accordind to random image fromm seed ftion\r\nconst [seed,setSeed] = useState(\"\"); \r\nconst [messages,setMessage] = useState(\"\"); \r\n\r\nuseEffect(() => {\r\n    if(id){\r\n        db.collection('romChats')\r\n        .doc(id)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot(snapshot =>( \r\n            setMessage(snapshot.docs.map((doc)=>doc.data()))\r\n\r\n        )); \r\n    }\r\n    \r\n}, [id])\r\n\r\nuseEffect(() => {\r\n      setSeed(Math.floor(Math.random()*5000))\r\n    }, [])\r\n\r\n// here is the fuction to create a new chat\r\nconst createChat = () =>{\r\n    const roomName = prompt(\"please enter name for chat\");\r\n    if (roomName){\r\n        //do some kind of ....\r\n        db.collection('romChats').add({\r\n            name:roomName\r\n        })\r\n    }\r\n}\r\n\r\n    // below here we condition the display contain depending on addNewchart\r\n    return !addNewchats ?  (\r\n        <Link to = {`/romChats/${id}`}>            \r\n            <div className=\"subSidebar\">        \r\n                <Avatar src ={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\r\n                <div className=\"subSidebar_infos\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message} </p>\r\n                </div> \r\n            \r\n            </div>\r\n        </Link>\r\n    ) : ( \r\n         <div onClick ={createChat}  className =\"subSidebar\">\r\n            <h3> <AddIcon/> Create New Chats...</h3>\r\n         </div>\r\n        );\r\n}\r\n\r\nexport default SubsideBar\r\n","import React,{createContext, useContext,useReducer} from 'react';\r\n\r\n// Here we create context for data Layer\r\nexport const StateContext=createContext();\r\n\r\n// Here is the datalayer linked to a high order component\r\nexport const StateProvider = ({reducer, initialState, children})=>(\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>   \r\n    \r\n    );\r\n\r\nexport const useStateValue = () =>  useContext(StateContext);\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport SubsideBar from '../03Subsidebar/SubsideBar'\r\nimport {Avatar, IconButton} from '@material-ui/core';\r\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\r\nimport ForumOutlinedIcon from '@material-ui/icons/ForumOutlined';\r\nimport DonutSmallOutlinedIcon from '@material-ui/icons/DonutSmallOutlined';\r\nimport FindReplaceOutlinedIcon from '@material-ui/icons/FindReplaceOutlined';\r\nimport db from \"../01Connects/firebase\"\r\nimport { useStateValue } from '../01Connects/StateProvider';\r\n\r\n\r\nfunction SideBar() {\r\n    // Here we map the sideBar to Firebase\r\n    const [romChats, setRoms] = useState([]);\r\n\r\n    const [{user}, dispatch] = useStateValue();\r\n    \r\n    // Here is the code that collect and loads rom contaiin from firebase\r\n     // onSnapshot est la fonction ki veille sur rom en quete d kelconke modification\r\n    //  docs, refer to the list of elements we have in the DB\r\n    //  map,permit us to map list of elements we have in the DB\r\n         useEffect(()=>{\r\n             const unsubscribe = db.collection('romChats').onSnapshot(snapshort=>(\r\n                setRoms(snapshort.docs.map(doc=>({\r\n                  id:doc.id,\r\n                  data:doc.data(), \r\n                })))\r\n            ));\r\n\r\n            return () =>{\r\n                unsubscribe(); \r\n            } \r\n\r\n        },[])\r\n\r\n    return (\r\n        <div className=\"sideBar\">\r\n\r\n            {/* <h1>Here is the header */}\r\n            <div className=\"Sidebar_Header\">     \r\n            <Avatar  src ={user.photoURL}/>\r\n                <div className=\"side_headeright\">\r\n                    <IconButton>\r\n                        <DonutSmallOutlinedIcon/>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ForumOutlinedIcon/>\r\n                        </IconButton>\r\n                    <IconButton>\r\n                        <MoreHorizOutlinedIcon/> \r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <h1>Here is the searchbar */}\r\n            <div className=\"Sidebar_Search\">\r\n                    <div className = \"sidebar_Searchcontainer\">\r\n                    \r\n                  \r\n                    <FindReplaceOutlinedIcon/>\r\n                    <input placeholder=\"Search for Chat\" type=\"text\"/>\r\n                </div>\r\n            </div>\r\n            {/* <h1>Here is the Chats */}\r\n            <div className=\"Sidebar_Chats\">\r\n                <SubsideBar addNewchats/>\r\n                {/* Here we pass values via props */}\r\n                  {romChats.map(room =>(\r\n                    <SubsideBar \r\n                        key={room.id}\r\n                        id={room.id}\r\n                        name = {room.data.name}\r\n                    />\r\n                  ))}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar\r\n","import React from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport db from \"../01Connects/firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useEffect, useState} from 'react';\r\nimport { useStateValue } from '../01Connects/StateProvider';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoodIcon from '@material-ui/icons/Mood';\r\nimport MicNoneIcon from '@material-ui/icons/MicNone';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport './Chat.css';\r\n\r\nfunction Chat() {\r\n    // here we create the state that will keep track of whats typed inside input \r\n    const [input, setInput]=useState(\"\");\r\n    // const [input, setinput]=useState(\"\");\r\n\r\n   // End of the state\r\n\r\n    // the constabove generate random id that will display different imagesfrom the api and placed inside avatar src link\r\n// the src link is and api that insrt images inside the avatar accordind to random image fromm seed ftion\r\nconst [seed,setSeed] = useState(''); \r\nconst {roomId} = useParams();\r\nconst [roomName, setroomName] = useState(\"\");\r\nconst [messages, setMessages] = useState([]);\r\nconst [{user}, dispatch] = useStateValue();\r\n\r\nuseEffect(() => {\r\n    // setSeed(Math.floor(Math.random()*5000))\r\n    if(roomId){\r\n        db.collection('romChats')\r\n          .doc(roomId)\r\n          .onSnapshot((snapshot) =>setroomName\r\n          (snapshot.data().name));\r\n\r\n        // Here we collect/read the messages from db and display  \r\n          db.collection('romChats')\r\n            .doc(roomId)\r\n            .collection(\"messages\")\r\n            .orderBy('timestamp', 'asc')\r\n            .onSnapshot((snapshot) => setMessages(snapshot.docs.map((doc)=>doc.data())) \r\n            );\r\n\r\n    }\r\n  }, [roomId])\r\n\r\n\r\nuseEffect(() => {\r\n      setSeed(Math.floor(Math.random()*5000))\r\n    }, [roomId])\r\n\r\nconst sendMessage = (e)=>{\r\n    e.preventDefault();\r\n    console.log(\"you typed\" , input)\r\n    db.collection('romChats').doc(roomId).collection('messages').add({\r\n        message:input,\r\n        name:user.displayName,\r\n        timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n\r\n\r\n    });\r\n\r\n    // the instruction below is to clear the input after we typed a contain\r\n    setInput(\"\");\r\n    }\r\n    return (\r\n        <div className =\"chatt\">\r\n{/* Here is the Header */}\r\n           <div className =\"chatts_Header\">\r\n                <Avatar src ={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n                        <div className = \"chat_Header_Infos\">\r\n                            <h3>{roomName}</h3>                       \r\n                            <p>last seen:{\"\"}\r\n                            {new Date(\r\n                                messages[messages.length-1]?.timestamp?.toDate()).toUTCString()}\r\n                            </p>\r\n                        </div>\r\n                        <div className = \"chatt_Header_rigth\">\r\n                            <IconButton>\r\n                                <SearchIcon/>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <AttachFileIcon/>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <ExpandMoreIcon/> \r\n                            </IconButton>\r\n                         </div>\r\n           </div>\r\n{/* Here is the Body */}\r\n           <div className =\"chatt_Body\">\r\n               {/* <p className={`chatt_message ${true && 'chatt_receiver'}` }>  */}\r\n           {messages.map((message) =>(\r\n               <p className={`chatt_message ${message.name === user.displayName \r\n                    && 'chatt_receiver'}` }\r\n                > \r\n                <span className =\"chatt_name\">{message.name}</span>\r\n                    {message.message}\r\n                    <span className =\"chatt_time\">\r\n                    {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                </span>\r\n               </p>\r\n              \r\n\r\n           ))}\r\n            </div>\r\n\r\n{/* Here is the Footer */}\r\n            <div className =\"chatt_Footer\">\r\n                <IconButton>                             \r\n                    <MoodIcon/>\r\n                </IconButton>\r\n                <form>\r\n                    <input \r\n                        type=\"text\" \r\n                        value={input}\r\n                        onChange={(e) =>setInput(e.target.value)}\r\n                        placeholder=\"type your text Here and press ENTER\">\r\n                    </input>\r\n              \r\n                    <button type =\"submit\" onClick ={sendMessage}>\r\n                        Send      \r\n                        <IconButton>                             \r\n                             <SendIcon/>\r\n                        </IconButton>\r\n                    \r\n                    </button>\r\n                    <IconButton>                         \r\n                        <AddAPhotoIcon/>\r\n                    </IconButton>\r\n                </form>\r\n                <IconButton>                     \r\n                    <MicNoneIcon/>\r\n                </IconButton>\r\n                    \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n// Above here is the initialstate with user not yet logged in\r\n\r\n// Below Here is after the User have Logged in, we push his informations to the Data\r\nexport const actionTypes = {\r\n    SET_USER:\"SET_USER\",\r\n};\r\n \r\n//here we ste the User accordingly to the trigged Action\r\n const reducer = (state ,action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user:action.user,\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport {auth, provider} from '../01Connects/firebase';\r\nimport \"./Login.css\";\r\nimport {useStateValue } from \"../01Connects/StateProvider\";\r\nimport {actionTypes} from \"../01Connects/reducer\"\r\n\r\nfunction Login() {\r\n    const [{}, dispatch ] = useStateValue();\r\n// Here is the google Authentification\r\n    const signIn = () =>{\r\n     auth.signInWithPopup(provider).then(result =>{\r\n            dispatch({\r\n                type:actionTypes.SET_USER,\r\n                user: result.user, \r\n            });\r\n        })\r\n        .catch((error) => alert(error.message));\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n        <h2>Whatsapp clone 2020 </h2>\r\n            <div className =\"login_container\">\r\n                <img src=\"https://www.messengerpeople.com/wp-content/uploads/bfi_thumb/whatsapp-africa-32ilx9h511np7tuz88dwv959eto6oh605v6fxupc6hi35wei6.png\" \r\n                        alt=\"\"                    \r\n                />\r\n                <div className = \"login_Text\">\r\n                    <h1>Sign in...</h1>\r\n                </div>\r\n                <Button onClick={signIn}>\r\n                Sign in with Google..\r\n                </Button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport Sidebar from './Components/02Sidebar/SideBar';\nimport Chat from './Components/04Chat/Chat';\nimport Login from './Components/00Landing/Login'\nimport {useStateValue } from \"./Components/01Connects/StateProvider\"\n\nfunction App() {\n  \n  \n  // Here is the google Authenticator\nconst [{user}, dispatch] = useStateValue();\n          \n\n\n  return (\n    <div className=\"App\">\n\n      <h1>237 React Apps</h1>\n\n    <div className = \"Body_layer\">\n      {/* Here we display a screen according to the presence of a user or not */}\n        \n      {!user ? (\n        <Login/>\n\n      ):(\n\n        <Router>\n            <Sidebar/>\n          <Switch>\n            <Route path =\"/romChats/:roomId\">              \n            <Chat/>\n            </Route>\n              <Route path =\"/\">\n              <Chat/>\n              </Route>\n          </Switch>\n        </Router>\n\n         \n      )}\n    </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport reducer, {initialState} from \"./Components/01Connects/reducer\";\nimport {StateProvider} from \"./Components/01Connects/StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <StateProvider initialState={initialState}\n    reducer = {reducer}\n  >\n    <App />\n  </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}